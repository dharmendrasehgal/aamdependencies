var isBaseballCardTitleClicked = false;
var containerWidth;
function zoom(n, t) {
    var s = n.xAxis[0],
        h = n.yAxis[0],
        a = n.initialXMax - n.initialXMin,
        v = n.initialYMax - n.initialYMin,
        i = a / 8,
        r = v / 8,
        u = s.min,
        f = h.min *= 1.1,
        e = s.max,
        o = h.max,
        c, l;
    (t ? (u = u + i > s.max - i ? s.max - i : u + i, f = f + r > h.max - r ? h.max - r : f + r, e = e - i < u + i ? u + i : e - i, o = o - r < f + r ? f + r : o - r) : (u = u - i < n.initialXMin ? n.initialXMin : u - i, f = f - r < n.initialYMin ? n.initialYMin : f - r, e = e + i > n.initialXMax ? n.initialXMax : e + i, o = o + r > n.initialYMax ? n.initialYMax : o + r), c = !1, l = !1, (s.min != u || s.max != e) && (u == n.initialXMin && e == n.initialXMax ? (n.zoomOut(), l = !0) : (s.setExtremes(u, e, !1, !1, {
        trigger: "zoom"
    }), c = !0)), (h.min != f || h.max != o) && (f == n.initialYMin && o == n.initialYMax ? l || n.zoomOut() : (h.setExtremes(f, o, !1, !1, {
        trigger: "zoom"
    }), c = !0)), c || t) && n.redraw()
}

function zoomIn(n) {
    zoom(n, !0)
}

function zoomOut(n) {
    zoom(n, !1)
}

function zoomInDoubleClick(n, t) {
    var i = n.xAxis[0],
        r = n.yAxis[0];
    t = n.pointer.normalize(t);
    var u = r.toValue(t.chartY),
        f = i.toValue(t.chartX),
        e = 1,
        o = 1,
        s, h, c, l;
    f < i.min || f > i.max || u < r.min || u > r.max || (i.min + i.minRange > f ? (s = i.min, e++, h = i.max - i.minRange * e) : i.max - i.minRange < f ? (h = i.max, e++, s = i.min + i.minRange * e) : (s = i.min + i.minRange, h = i.max - i.minRange), r.min + r.minRange > u ? (c = r.min, o++, l = r.max - r.minRange * o) : r.max - r.minRange < u ? (l = r.max, o++, c = r.min + r.minRange * o) : (c = r.min + r.minRange, l = r.max - r.minRange), i.setExtremes(s, h, !1, !1, {
        trigger: "zoom"
    }), r.setExtremes(c, l, !1, !1, {
        trigger: "zoom"
    }), n.redraw())
}

function resetZoom(n) {
    var r = n.initialXMax - n.initialXMin,
        u = n.initialYMax - n.initialYMin,
        t = n.xAxis[0],
        i = n.yAxis[0],
        f = t.max - t.min,
        e = i.max - i.min;
    (f < r || e < u) && n.zoomOut()
}

function calculateWheelSpeed(n) {
    var i, t;
    return n.wheelDelta ? i = n.wheelDelta % 120 - 0 == -0 ? n.wheelDelta / 120 : n.wheelDelta / 12 : (t = n.deltaY ? n.deltaY : n.detail, i = -(t % 3 ? t * 10 : t / 3)), i > 0 ? 1 : -1
}

function cancelEvent(n) {
    return n = n ? n : window.event, n.stopPropagation && n.stopPropagation(), n.preventDefault && n.preventDefault(), n.cancelBubble = !0, n.cancel = !0, n.returnValue = !1, !1
}

function panUsingScrollWheel(n, t) {
    var u = calculateWheelSpeed(t),
        i = n.yAxis[0],
        r = i.max - i.min,
        f = n.initialYMax - n.initialYMin;
    if (!(r >= f)) return i.min - i.minRange / 2 * u < n.initialYMin ? (newYMin = n.initialYMin, newYMax = newYMin + r) : (newYMin = i.min - i.minRange / 2 * u, newYMax = newYMin + r, newYMax > n.initialYMax && (newYMax = n.initialYMax, newYMin = newYMax - r)), i.setExtremes(newYMin, newYMax, !0, !1, {
        trigger: "pan"
    }), cancelEvent(t)
}

function bindPanning(n) {
    $(".FloatingZoomToolbar").css({
        left: $(n.container).offset().left + 5,
        top: $(n.container).offset().top + 5
    });
    $(n.container).mouseover(function() {
        $(".FloatingZoomToolbar").show()
    }).mouseout(function() {});
    $(".buttonZoomInNormal").unbind("click").bind("click", function() {
        zoomIn(n)
    });
    $(".buttonZoomOutNormal").unbind("click").bind("click", function() {
        zoomOut(n)
    });
    $(".buttonZoomHomeNormal").unbind("click").bind("click", function() {
        resetZoom(n)
    });
    $(n.container).dblclick(function(t) {
        zoomInDoubleClick(n, t)
    });
    n.container.addEventListener ? (n.container.addEventListener("DOMMouseScroll", function(t) {
        panUsingScrollWheel(n, t)
    }, !1), n.container.addEventListener("mousewheel", function(t) {
        panUsingScrollWheel(n, t)
    }, !1)) : n.container.attachEvent && n.container.attachEvent("onmousewheel", function(t) {
        panUsingScrollWheel(n, t)
    });
    n.isDragging = !1;
    var t = n.yAxis[0],
        i = n.xAxis[0];
    n.initialYMin = t.min;
    n.initialYMax = t.max;
    n.initialXMin = i.min;
    n.initialXMax = i.max;
    $(n.container).mousedown(function(t) {
        var i, r;
        t = n.pointer.normalize(t);
        n.mouseY = t.chartY;
        i = n.yAxis[0];
        n.yDataRange = i.max - i.min;
        r = n.xAxis[0];
        n.mouseX = t.chartX;
        xData = r.getExtremes();
        yData = i.getExtremes();
        xFullRange = n.initialXMax - n.initialXMin;
        n.xDataRange = r.max - r.min;
        n.isDragging = xFullRange > n.xDataRange
    }).mousemove(function(r) {
        var a, s, h, u, f, c, l, e, o;
        r = n.pointer.normalize(r);
        a = n.isDragging;
        t = n.yAxis[0];
        i = n.xAxis[0];
        a && ($(n.container).css("cursor", "move"), s = n.mouseY - r.chartY, (s < -10 || s > 10) && (h = t.toValue(r.chartY) - t.toValue(n.mouseY), yData.min - h < n.initialYMin ? (u = n.initialYMin, f = u + n.yDataRange) : (u = yData.min - h, f = u + n.yDataRange, f > n.initialYMax && (f = n.initialYMax, u = f - n.yDataRange)), t.setExtremes(u, f, !0, !1, {
            trigger: "pan"
        }), n.isDragged = !0), c = n.mouseX - r.chartX, (c < -10 || c > 10) && (l = i.toValue(r.chartX) - i.toValue(n.mouseX), xData.min - l < n.initialXMin ? (e = n.initialXMin, o = e + n.xDataRange) : (e = xData.min - l, o = e + n.xDataRange, o > n.initialXMax && (o = n.initialXMax, e = o - n.xDataRange)), i.setExtremes(e, o, !0, !1, {
            trigger: "pan"
        }), n.isDragged = !0))
    });
    $(document).mouseup(function() {
        $(n.container).css("cursor", "default");
        n.isDragging = !1
    })
}

function SetExpReturnAndVolatility(setisSelectionChanged) {
    var customport = generatePortfoiloObj();
    if (setisSelectionChanged)
        isSelectionChanged = true;
    customportRet = AAGlobal.CalculateCustomPortfolioData(customport);
    $('.expectedReturnsCalc .calcValue').text(customportRet.ExpectedReturn ? (parseFloat(customportRet.ExpectedReturn).toFixed(1) + "%") : "0.0%")
    $('.volatilityCalc .calcValue').text(customportRet.Volatility ? (parseFloat(customportRet.Volatility).toFixed(1) + "%") : "0.0%")
}

function setGroupSlider(key, val) {
    var groupSlider = $('.single-slider-group-' + key.replace(' ', '-'));
    groupSlider.jRange({
        from: 0,
        to: 100,
        maxLimit: (window.constraintsDisabled ? 100 : parseInt(groupSlider.attr('data-maxVal'))),
        step: .1,
        showLabels: false,
        showScale: false,
        format: '%s',
        width: 120,
        disable: true,
        theme: 'theme-' + key.replace(' ', '-').toLowerCase()
    });
    groupSlider.jRange('setValue', val);
}

function setUSCashSlider(val) {
    var uscashSlider = $('.single-slider-us-cash');
    uscashSlider.jRange({
        from: 0,
        to: 100,
        step: .1,
        showLabels: false,
        showScale: false,
        format: '%s',
        width: 100,
        disable: true,
        theme: 'theme-blue',
        onstatechange: function (e) {

        }
    });
    uscashSlider.jRange('setValue', val);
    uscashSlider.closest(".slider").find(".percentValue").text(val.toFixed(1) + "%");
    uscashSlider.closest(".slider").find(".percentValueHidden").text(val.toFixed(1) + "%");
    $("#cashAlocationWrpr").find('.fullyAllocated').hide();
    $("#cashAlocationWrpr").find(".percentValue").text(val.toFixed(1) + "%");
    $("#cashAlocationWrpr").find(".percentValueHidden").text(val.toFixed(1) + "%");
    $("#cashAlocationWrpr").find('.progressbar').find('.ui-progressbar-value.ui-widget-header.ui-corner-left').css('width', parseInt(val.toFixed(1), 10) + '%');
    if (val.toFixed(1) === '0.0') {
        $("#cashAlocationWrpr").find('.fullyAllocated').show();
    }
}

function applyRestrictions(slider, value) {

    var max = slider.next().attr("data-maxVal");
    max = (window.constraintsDisabled ? 100 : parseFloat(max));
    max = parseFloat(max);
    value = parseFloat(value);
    if (value > max) {
        value = max;
        //var pointer = slider.pointers.last();
        //slider.setPosition(pointer, value * 100 / max, false, true);
        //slider.setPosition(pointer, value, false, true);
    }

    slider.closest(".percentValueInput").html(value.toFixed(1));
	slider.closest(".percentValueInput").val(value.toFixed(1));
    slider.siblings(".percentValueInputHidden").html(value.toFixed(1));
    //check and set the group totalWeight
    var group = slider.closest(".assetRow").attr("data-group");
    var percentsW = $(".assetRow[data-group='" + group + "']").find(".percentValueInputHidden");
    var totalGroupWeight = 0;
    $.each(percentsW, function (index, val) {
        totalGroupWeight += parseFloat($(val).html().replace("%", ""));
    });
    var groupRow = $(".sliderHeader[data-group='" + group + "']");
    var groupMaxPercent = groupRow.children(".maxValue").text();
    groupMaxPercent = (window.constraintsDisabled ? 100 : parseFloat(groupMaxPercent));
    //Get total weights
    var percentTotalW = $(".assetRow").find(".percentValueInputHidden");
    var totalWeight = 0;
    $.each(percentTotalW, function (index, val) {
        totalWeight += parseFloat($(val).html().replace("%", ""));
    });
    // var usCashValue = parseFloat($('.single-slider-us-cash').closest(".slider").find(".percentValue").text());
    //  totalWeight = totalWeight - usCashValue;
    var finalVal = value;
    if (groupMaxPercent <= totalGroupWeight) {
        finalVal = value + groupMaxPercent - totalGroupWeight;
        totalGroupWeight = groupMaxPercent;
        totalWeight = totalWeight - value + finalVal;
    }
    if (totalWeight > 100) {
        finalVal = finalVal + 100 - totalWeight;
        totalGroupWeight = totalGroupWeight - value + finalVal;
    }
    if (finalVal < 0) finalVal = 0;
    if (finalVal != value) {
        slider.val(finalVal.toFixed(2));
        slider.closest(".percentValueInput").html(finalVal.toFixed(2));
        slider.siblings(".percentValueInputHidden").html(finalVal.toFixed(1));
    }
    //if (totalWeight <= 100) {
    //    setUSCashSlider(100 - totalWeight);
    //}
    var totalgWeight = totalGroupWeight > 0 ? totalGroupWeight.toFixed(1) + "%" : "0.00";

    groupRow.find(".percentValue").text(totalgWeight);
    //setGroupSlider(group, totalGroupWeight.toFixed(1));
    //slider.closest('#portfolio').find('.slider .maxLimit').removeClass('active');
    //slider.closest(".slider").find('.maxLimit').addClass('active').show('800');
    //slider.closest('#portfolio').find('.slider .maxLimit').not('.active').hide('800');
    return true;
}

function generatePortfoiloObj(name) {
    var basketCode = Math.random().toString(36).substring(7);
    var basketName = name;
    var basketShortDisplayName = name;
    var customPortfolios = [];
    $.each($(".assetRow"), function (e, r) {
        var weight;
        if ($(r).find('.input-number').length > 0)
            weight = $(r).find('.input-number').val();

        weight = parseFloat(weight);
        var indexCode = $(r).find('.assetClass').attr('data-code');
        if (weight != 0) {
            CreatePortfolioWeightObject(customPortfolios, basketCode, basketName, basketShortDisplayName, indexCode, weight);
        }
    });

    //Add us cash
    if ($("#cashAlocationWrpr").find('.percentValueInputHidden').length > 0)
        weight = $("#cashAlocationWrpr").find('.percentValueInputHidden').html().replace("%", "");
    else
        weight = $("#cashAlocationWrpr").find('.percentValueHidden').text().replace("%", "");
    weight = parseFloat(weight);

    var indexCode = $("#cashAlocationWrpr").find('.cash-allocation').attr('data-code');
    if (weight != 0) {
        CreatePortfolioWeightObject(customPortfolios, basketCode, basketName, basketShortDisplayName, indexCode, weight)
    }
    return customPortfolios;
}

function CreatePortfolioWeightObject(customPortfolios, basketCode, basketName, basketShortDisplayName, indexCode, weight) {

    return customPortfolios.push({
        ValidFromDate: AAGlobal.HeroChartData[0].AsOnDate,
        ValidToDate: AAGlobal.HeroChartData[0].AsOnDate,
        BasketId: -1,
        BasketCode: basketCode,
        BasketDisplayName: basketName,
        BasketShortDisplayName: basketShortDisplayName,
        BasketDescription: null,
        IndexCode: indexCode,
        IndexDisplayName: null,
        IndexShortDisplayName: null,
        Weight: weight,
        IsModelPortfolio: false,
        IsCustomPortfolio: true,
        AreConstraintsDisabled: window.constraintsDisabled
    });
}

function getGroupBreakDown() {
    var data = [];
    $.each($(".assetRow"), function (e, r) {
        var weight;
        if ($(r).find('.percentValueInputHidden').length > 0)
            weight = $(r).find('.percentValueInputHidden').html().replace("%", "");
        else
            weight = $(r).find('.percentValueHidden').text().replace("%", "");

        var group = $(r).attr('data-group');
        data.push({
            group: group,
            weight: weight
        });
    });
    if ($("#cashAlocationWrpr").find('.percentValueInputHidden').length > 0)
        weight = $("#cashAlocationWrpr").find('.percentValueInputHidden').html().replace("%", "");
    else
        weight = $("#cashAlocationWrpr").find('.percentValueHidden').text().replace("%", "");
    data.push({
        group: "US Cash",
        weight: weight
    });

    var groupedData = $.Enumerable.From(data).GroupBy("$.group").ToArray();
    var returnData = []
    $.each(groupedData, function (index, groupedItem) {

        var key = groupedItem.Key();
        var totalWeight = 0;
        $.each(groupedItem.source, function (index, val) {
            totalWeight += parseFloat(val.weight);
        });
        returnData.push({
            name: key,
            y: totalWeight,
            color: AAGlobal.GroupConfig[key].Color
        });
    });
    return returnData;
}



function ReloadDonutChart(n) {
    var i = generatePortfoiloObj(),
        t;
    n && (isSelectionChanged = !0);
    customportRet = AAGlobal.CalculateCustomPortfolioData(i);
    t = getGroupBreakDown();
    $("#donutChartContainer").loadDonutChart(t, customportRet.ExpectedReturn)
}

function componentToHex(c) {
    var hex = c.toString(16);
    return hex.length == 1 ? "0" + hex : hex;
}

function rgbToHex(str) {
    str = str.replace('rgb', '').replace('(', '').replace(')', '');
    if (str.indexOf('#') > -1)
        return str;
    else {
        var sp = str.split(',');
        if (sp.length > 0) {
            return "#" + componentToHex(parseInt(sp[0])) + componentToHex(parseInt(sp[1])) + componentToHex(parseInt(sp[2]));
        }
    }
}

function customconfirm(message, callback) {
    if (typeof callback != "undefined") {
        $('#confirm').modal({
            closeHTML: "<a href='#' title='Close' class='modal-close'>x</a>",
            position: ["20%", ],
            overlayId: 'confirm-overlay',
            containerId: 'confirm-container',
            onShow: function (dialog) {
                var modal = this;

                $('.message', dialog.data[0]).append(message);

                // if the user clicks "yes"
                $('.yes', dialog.data[0]).click(function () {
                    // call the callback
                    if ($.isFunction(callback)) {
                        callback.apply();
                    }
                    // close the dialog
                    modal.close(); // or $.modal.close();
                });
            }
        });
    } else {
        $('#confirm').modal({
            closeHTML: "<a href='#' title='Close' class='modal-close'>x</a>",
            position: ["20%", ],
            overlayId: 'confirm-overlay',
            containerId: 'confirm-container',
            onShow: null
        });
    }
}

function confirmChange(message, callback, elsecallback) {
    $('#confirm').modal({
        closeHTML: "<a href='#' title='Close' class='modal-close'>x</a>",
        position: ["20%", ],
        overlayId: 'confirm-overlay',
        containerId: 'confirm-container',
        onShow: function (dialog) {
            var modal = this;

            $('.message', dialog.data[0]).append(message);

            // if the user clicks "yes"
            $('.yes', dialog.data[0]).click(function () {
                // call the callback
                if ($.isFunction(callback)) {
                    callback.apply();
                }
                // close the dialog
                modal.close(); // or $.modal.close();
            });
            $('.no', dialog.data[0]).click(function () {
                // call the elsecallback
                if ($.isFunction(elsecallback)) {
                    elsecallback.apply();
                }
                // close the dialog
                modal.close(); // or $.modal.close();
            });
        }
    });
}

function selectElementContents(el) {
    /*var range = document.createRange();
    range.selectNodeContents(el);
    var sel = window.getSelection();
    clearSelection();
    sel.addRange(range);*/
}

function clearSelection() {
    try {
        var sel = window.getSelection() ? window.getSelection() : document.selection;
        if (sel) {
            if (sel.removeAllRanges) {
                sel.removeAllRanges();
            } else if (sel.empty) {
                sel.empty();
            }
        }
    }
    catch (err) {
        //do nothing
    }
}

function naturalSorter(as, bs) {
    var a, b, a1, b1, i = 0, n, L,
    rx = /(\.\d+)|(\d+(\.\d+)?)|([^\d.]+)|(\.\D+)|(\.$)/g;
    if (as === bs) return 0;
    a = as.toLowerCase().match(rx);
    b = bs.toLowerCase().match(rx);
    L = a.length;
    while (i < L) {
        if (!b[i]) return 1;
        a1 = a[i],
        b1 = b[i++];
        if (a1 !== b1) {
            n = a1 - b1;
            if (!isNaN(n)) return n;
            return a1 > b1 ? 1 : -1;
        }
    }
    return b[i] ? -1 : 0;
}

function RemoveFocusPortfolioName(thisObj) {
    clearSelection();
}

function ApplyWeightConstraintsSetting() {
    $('.percentValueInput').each(function (i, item) {
        var input = $(item);
        var maxVal = (window.constraintsDisabled ? 100 : parseInt(input.siblings('.maxValue').attr('data-maxVal')));
        input.attr('max', maxVal);
    });
}
var isSelectionChanged, enableEdit, initialLoad, clickEvent;
(function ($) {

    $.fn.extend({
        //pass the options variable to the function
        loadScatterChart: function (data, options) {

            var me = this;

            var defaults = new AAGlobal[options.defaults](me, options.hideDataLabels);
            var options = $.extend(true, defaults, options);
            var chartTitles = options.chartTitles;
            var showDescription = options.showDescription;
            var sortObj = function (a, b) {
                return a[options.XField] - b[options.XField];
            }
            if (options.selectedCategories && options.selectedCategories.length > 0) {
                var isPortfolioActive = $('.active-decider[name="model-portfolio"]').hasClass('active-category');
                var hasPortfolio = $('.active-decider[name="model-portfolio"]:visible').length > 0;
                $.Enumerable.From(options.Categories).ForEach(function (item) {
                    item.isAllEnabled = $.inArray(item.Name, options.selectedCategories) > -1 ? true : (item.Name == 'US Cash' ? true : false);

                    item.isBenchmarkActive = hasPortfolio ? (isPortfolioActive || (item.isAllEnabled && options.selectedCategories.length == 1)) : item.isAllEnabled;
                });

            }


            $(me).width(options.Width).height(526);
            data = data.sort(sortObj);

            var categoryData = [];

            options.ManipulateActiveColor(data);


            var portfoliosAdded = [];
            $.each(options.Categories, function (categoryIndex, category) {

                var currentPortfolio = category.Name == 'model-portfolio';
                var categoryFullData = $(data).filter(function () {
                    if (currentPortfolio) {
                        return this.IsHubPoint && $.inArray(this['DisplayName'], portfoliosAdded) == -1;
                    }
                    else {
                        return this[options.CategoryField] == category.Name;
                    }
                }).toArray();


                var benchMarkData = $(categoryFullData).filter(function () { return this[options.BenchmarkColumn] == true }).toArray();

                var seriesData = options.CreateHighChartData(benchMarkData, currentPortfolio);

                if (seriesData != null && seriesData.length > 0) {
                    categoryData.push(seriesData);
                }



                if (!currentPortfolio) {

                    if (benchMarkData.length > 0 && benchMarkData[0].isActive) {

                        portfoliosAdded.push(benchMarkData[0].DisplayName);
                    }
                    else if (this.IsHubPoint) {
                        portfoliosAdded.push(benchMarkData[0].DisplayName);
                    }

                    var benchMarkLessData = $(categoryFullData).filter(function () { return this[options.BenchmarkColumn] != true }).toArray();

                    var seriesData = options.CreateHighChartData(benchMarkLessData);

                    if (seriesData != null && seriesData.length > 0) {
                        categoryData.push(seriesData);
                    }
                }

            });
            var seriesData = createScatterSeriesData(categoryData, options);

            var efficientFrontierSeriesData = [];

            if (AAGlobal.EfficientFrontierData != null) {
                var efData = options.GetPlotPoints(AAGlobal.EfficientFrontierData, options);
                efficientFrontierSeriesData.push(efData);
                var efficientFrontierSeriesDataS = createEfficientFrontierData(efficientFrontierSeriesData, options);
                seriesData = $.merge(efficientFrontierSeriesDataS, seriesData);
            }

            var chartOptions = options.GetConfiguration(seriesData);
            if (chartTitles) {
                chartOptions.title.text = chartTitles.Title;
                chartOptions.subtitle.text = chartTitles.SubTitle;
            }

            chartOptions.customCallback = options.Callback.toString();
            //chartOptions.CustomTooltipPoint = { SeriesIndex: 1, PointIndex: 0 };
            if (isiPad && window.innerWidth < 979) {
                chartOptions.credits.style.width = window.innerWidth - 100;
                chartOptions.credits.style["font-size"] = "6px";
                chartOptions.subtitle.style["fontSize"] = "12px";
                chartOptions.subtitle.width = window.innerWidth - 60;

            }
            
            var exportOptions = $.extend(true, {}, chartOptions);
            exportOptions.showDescription = showDescription;
            exportOptions.plotOptions.series.dataLabels.format = '{point.' + options.ShortDisplayName + '}';
            options.ManipulateExportConfig(exportOptions);
            chartOptions.exportOptions = exportOptions;
            
            chartOptions.title.text = ""; 
            chartOptions.subtitle.text = "";
            chartOptions.credits.enabled = false;
            chartOptions.chart.marginTop = 23;
            chartOptions.chart.marginBottom = 53;
            // PopulateExportChartConfig(chartOptions, null, chartOptions.CustomTooltipPoint);

            //chartOptions.hiddenFieldOptions = escape(JSON.stringify(exportOptions));
            $(me).highcharts(chartOptions, function (chart) { // on complete
                options.Callback(chart);
                if (AAGlobal.StaggerDataLabels) {
                    AAGlobal.StaggerDataLabels(chart.series);
                }
                bindPanning(chart);
            });
            $(".heroChartSubtitle").html(window.heroInfographicsScatterSubTitle);

        }
        //end of Plugin function
    });

    /*START : HELPER FUNCTIONS ...*/

    var createScatterSeriesData = function (seriesData, options) {
        var scatterSeriesCollection = [];
        $.each(seriesData, function (seriesIndex, series) {
            var category = $.Enumerable.From(options.Categories).Last(function (record) { return record.Name == series[0][options.CategoryField]; });
            scatterSeriesCollection.push(options.GetScatterSeriesOptions(category, series, series[0][options.BenchmarkColumn]));
        });
        return scatterSeriesCollection;
    }

    var createRegressionSeriesData = function (seriesData, options) {
        var regressionSeriesCollection = [];
        $.each(seriesData, function (seriesIndex, series) {
            regressionSeriesCollection.push(options.GetRegressionSeriesOptions(seriesIndex, series));
        });
        return regressionSeriesCollection;
    }

    var createEfficientFrontierData = function (seriesData, options) {
        var efficientFrontierSeriesCollection = [];
        $.each(seriesData, function (seriesIndex, series) {
            efficientFrontierSeriesCollection.push(options.GetEfficientFrontierOptions(seriesIndex, series));
        });
        return efficientFrontierSeriesCollection;
    }
    /*END : HELPER FUNCTIONS ...*/
})(jQuery),
(function ($) {


    $.fn.extend({
        //pass the options variable to the function

        loadColumnChart: function (data, options) {

            var me = this;
            var defaults = new AAGlobal[options.defaults](me, options.category, options.hideDataLabels);
            var options = $.extend(true, defaults, options);
            var chartTitles = options.chartTitles; //{ Title: chartTitles.heroInfographicsTitle, SubTitle: heroInfographicsSubTitle }
            var showDescription = options.showDescription;
            if (options.selectedCategories && options.selectedCategories.length > 0) {
                $.Enumerable.From(options.Categories).ForEach(function (item) {
                    item.isAllEnabled = $.inArray(item.Name, options.selectedCategories) > -1;

                });
            }


            $(me).width(options.Width).height(526);

            options.ManipulateActiveColor(data);
            var seriesData = options.GetSeriesData(data);


            var categories = options.GetCategories(data);

            var chartOptions = options.GetConfiguration(seriesData, categories);
            if (chartTitles) {
                chartOptions.title.text = chartTitles.Title;
                chartOptions.subtitle.text = chartTitles.SubTitle;
            }
            if (isiPad && window.innerWidth < 979) {
                chartOptions.credits.style.width = window.innerWidth - 100;
                chartOptions.credits.style["font-size"] = "6px";
                chartOptions.subtitle.style["fontSize"] = "12px";
                chartOptions.subtitle.width = window.innerWidth - 60;
            }
            var exportOptions = $.extend(true, {}, chartOptions);
            exportOptions.showDescription = showDescription;
            options.ManipulateExportConfig(exportOptions);
            //chartOptions.hiddenFieldOptions = escape(JSON.stringify(exportOptions));
            chartOptions.exportOptions = exportOptions;
            chartOptions.customCallback = options.Callback.toString();
            
            chartOptions.title.text = ""; 
            chartOptions.subtitle.text = "";
            chartOptions.credits.enabled = false;
            chartOptions.chart.marginTop = 23;
            chartOptions.chart.marginBottom = 53;
            $(me).highcharts(chartOptions, function (chart) { // on complete
                bindPanning(chart);
                options.Callback(chart);
            });
            $(".heroChartSubtitle").html(window.heroInfographicsColumnSubTitle);
        }
        //end of Plugin function
    });


})(jQuery),
(function ($) {


    $.fn.extend({
        //pass the options variable to the function

        loadCoreOverviewColumnChart: function (data, options) {

            var me = this;
            var defaults = new AAGlobal[options.defaults](me, options.category, options.hideDataLabels);
            var options = $.extend(true, defaults, options);
            var chartTitles = options.chartTitles; //{ Title: chartTitles.heroInfographicsTitle, SubTitle: heroInfographicsSubTitle }
            var showDescription = options.showDescription;
            if (options.selectedCategories && options.selectedCategories.length > 0) {
                $.Enumerable.From(options.Categories).ForEach(function (item) {
                    item.isAllEnabled = $.inArray(item.Name, options.selectedCategories) > -1;

                });
            }

            options.ManipulateActiveColor(data);
            var seriesData = options.GetSeriesData(data);
            var categories = options.GetCategories(data);

            var chartOptions = options.GetConfiguration(seriesData, categories);
            var height = 24 * data.length + chartOptions.chart.spacingTop + chartOptions.chart.spacingBottom + 50; //+50 for y-axis space
            options.Height = height > options.Height ? height : options.Height;
            $(me).width(options.Width).height(526);


            if (chartTitles) {
                chartOptions.title.text = chartTitles.Title;
                chartOptions.subtitle.text = chartTitles.SubTitle;
            }
            if (isiPad && window.innerWidth < 979) {
                chartOptions.credits.style.width = window.innerWidth - 100;
                chartOptions.credits.style["font-size"] = "6px";
                chartOptions.subtitle.style["fontSize"] = "12px";
                chartOptions.subtitle.width = window.innerWidth - 60;
            }
            var exportOptions = $.extend(true, {}, chartOptions);
            exportOptions.showDescription = showDescription;
            options.ManipulateExportConfig(exportOptions);
            chartOptions.exportOptions = exportOptions
            //chartOptions.hiddenFieldOptions = escape(JSON.stringify(exportOptions));
            chartOptions.customCallback = options.Callback.toString();
            
            chartOptions.title.text = ""; 
            chartOptions.subtitle.text = "";
            chartOptions.credits.enabled = false;
            chartOptions.chart.marginTop = 23;
            chartOptions.chart.marginBottom = 53;
            
            $(me).highcharts(chartOptions, function (chart) { // on complete
                bindPanning(chart);
                options.Callback(chart);
            });
            $(".heroChartSubtitle").html(window.heroInfographicsColumnSubTitle);
        }
        //end of Plugin function
    });


})(jQuery),
function(n) {
    n.fn.extend({
        loadTableView: function(t, i) {
            var r = this,
                a = new AAGlobal[i.defaults](r),
                i = n.extend(!0, a, i),
                c = !!navigator.userAgent.match(/Trident.*rv\:11\./),
                t, u, f;
            if (n.each(n(t), function(n, t) {
                    i.GetAdditionalProp && (t.Rank = i.GetAdditionalProp(t))
                }), i.Sorter && (t = n(t).sort(i.Sorter)), t = {
                    items: n(t).toArray()
                /* }, n(r).html(Mustache.to_html(i.GetTemplate(), t)), n(r).css({*/
                }, n(r).html(i.GetTemplateWithoutMustache(t)), n(r).css({
                    position: "relative",
                    overflow: "auto",
                    height: i.Height + "px",
                    "max-width": i.Width + "px"
                }), i.InitializeAndSortColumn(), floater(r), colWidth(r, "thead", "tr", "th"), n(r).attr("id") == "TableView") {
                u = {};
                f = parseInt(n(r).find("thead th").outerHeight(), 10) + "px";
                n.each(n(r).find("tbody tr"), function(t, i) {
                    var r = n(i).attr("data");
                    u[r] = u[r] == undefined ? n(this).height() : u[r] + n(this).height()
                });
                n(".captionGroup").length && (f = parseInt(f, 10) + n(r).find(".captionGroup").height() + 23 + "px");
                n(".is-Clicked").length && (f = parseInt(f, 10) + 4 + "px");
                n(r).parent().find("#legendGrp").css("margin-top", f);
                for (key in u) {
                    if (key == "Precious Metals") {
                        n("body").append('<span id="textWrapper">P Metals<\/span>');
                        var l = n("#textWrapper").width(),
                            e = (u[key] + l) / 2 - 21,
                            o = u[key] - .5;
                        (/*n.browser.msie || */c) && (o = u[key] - 2.5);
                        //n.browser.msie && n.browser.version < 9 && (e = 0, s = "width:" + u[key] + "px;", h = "left:3px;");
                        n(r).parent().find("#legendGrp").append('<div class="wrpr" style="overflow:hidden;height:' + o + 'px;"><div class="lgnd" style="top:' + e + "px;" + s + h + '">P Metals<\/div><\/div>')
                    } else {
                        n("body").append('<span id="textWrapper">' + key + "<\/span>");
                        var l = n("#textWrapper").width(),
                            e = (u[key] + l) / 2 - 21,
                            s = "",
                            o = u[key] - .5,
                            h = "";
                        (/*n.browser.msie || */c) && (o = n(r).parent().find("#legendGrp").parent().hasClass("currency") ? u[key] - 4 : u[key] - 2.5);
                        //n.browser.msie && n.browser.version < 9 && (e = 0, s = "width:" + (u[key] - .5) + "px;", h = "left:3px;");
                        n(r).parent().find("#legendGrp").append('<div class="wrpr" style="height:' + o + 'px;"><div class="lgnd" style="top:' + e + "px;" + s + h + '">' + key + "<\/div><\/div>")
                    }
                    n("#textWrapper").remove()
                }
                n(r).find("th").eq(1).attr("name") != "CurrencyCode" && i.InitializeAndSortColumn.call(i, n(r).find("th").eq(1));
                n(r).find("tbody").css("height", "")
            } else n(r).find("th").eq(0).removeClass("data-asc").removeClass("data-desc"), i.InitializeAndSortColumn.call(i, n(r).find("th").eq(0));
            n(r).find("th").click(function() {
                i.InitializeAndSortColumn.call(i, this);
                n(r).find("tbody").css("height", "")
            });
            n(r).find("tbody").isotope("on", "layoutComplete", function() {
                floater(r)
            });
            //i.AddDisclosure(this)
        }
    })
}(jQuery),
function(n) {
    n.fn.extend({
        loadComparisonChart: function(i, r, u) {
            var e = this,
                o = r.logBase,
                h = new AAGlobal[u](e, i, r),
                r = n.extend(h, r);
            //n(e).width(r.Width).height(r.Height);
            n(e).height(576);
            var c = r.GetSeriesData(),
                f = r.GetConfiguration(t(c, r)),
                s = n.extend(!0, {}, f);
            s.credits.enabled = !0;
            f.hiddenFieldOptions = JSON.stringify(s);
            f.customCallback = r.Callback.toString();
            o && (f.yAxis.labels.formatter = function() {
                return Math.pow(o, this.value)
            });
            n(e).highcharts(f, function(t) {
                r.Callback(t);
                n(r.ForecastedTooltipSelector).css("padding-left", t.plotLeft)
            });
            r.AddDisclosure(this)
        }
    });
    var t = function(t, i) {
        var r = [];
        return n.each(t.Rolling, function(n, t) {
            var u = i.Categories[n];
            r.push(i.GetSplineSeriesData(u, t))
        }), n.each(t.Forecasted, function(n, t) {
            var u = i.Categories[n];
            r.push(i.GetScatterSeriesData(u, t))
        }), r
    }
}(jQuery),
function(n) {
    n.fn.extend({
        loadShillerChart: function(t, i) {
            var u = this,
                e = {
                    Height: "295",
                    Width: "790"
                },
                r = i.base ? parseInt(i.base) : null,
                i = n.extend(e, i),
                o = [],
                s = [],
                l = 5,
                h, c, f;
            n(t).each(function(t, i) {
                var r = n.extend({}, i),
                    u = n.extend({}, i);
                r.low = r.MinValue;
                r.q1 = r.Percentile25Th;
                r.median = r.MedianValue;
                r.q3 = r.Percentile75Th;
                r.high = r.MaxValue;
                o.push(r);
                u.y = u.CurrentValue;
                s.push(u)
            });
            h = n.Enumerable.From(t).Select("$.CountryName").ToArray();
            //n(u).width(i.Width).height(i.Height).css("padding-left", e.left + "px");
            n(u).height(576);
            c = "<div class='summary'>" + GetDisclaimerText("EQUITIES_BOX") + "<\/div>";
            f = n(u).parent().find(".disclosure");
            parseInt(f.length) > 0 && n(f).empty().append(c);
            n(u).highcharts({
                chart: {
                    type: "boxplot",
                    style: {
                        "text-transform": "none"
                    },
                    plotBackgroundColor: "#ffffff",
                    spacingTop: 33,
					spacingRight: 33,
                    spacingBottom: 33,
					spacingLeft: 33
                },
                title: {
                    text: ""
                },
                tooltip: {
                    useHTML: !0,
                    shared: !1,
                    borderRadius: 0,
                    borderWidth: 0,
                    shadow: !1,
                    enabled: !0,
                    backgroundColor: "none",
                    positioner: function(t, i, r) {
                        var h;
                        n(".boxCart-arrow").removeClass("rightarrow").removeClass("leftarrow");
                        var o = this.chart.series,
                            s = o[0].data,
                            f = 0;
                        for (h = s.length; f < h; f++)
                            if (Math.round(s[f].plotX) == r.plotX) break;
                        var e = 0,
                            u = 0,
                            c = 40;
                        return u = o[1].data[f].plotY - c / 2 - 3, u + 40 > n(".boxCart").outerHeight() && (u -= u + 40 - n(".boxCart").outerHeight()), r.plotX - t > 0 ? (n(".boxCart-arrow").addClass("rightarrow").css("top", u), e -= n(".boxCart").width() + 10) : (n(".boxCart-arrow").addClass("leftarrow").css("top", u), e += c + 30), {
                            x: r.plotX + e,
                            y: 1
                        }
                    },
                    formatter: function() {
                        var n = '<div name="' + this.point.CountryName + '" class="cartswrpr boxCart">';
                        return n += '<a href="#" class="cartFlag"><img src="' + this.point.CountryFlagURL + '" alt="' + this.point.CountryName + '" title="' + this.point.CountryName + '" border="0"><\/a>', n += '<div class="returnValues">', r ? (n += '<div><span class="firstchild">Current Value<\/span><span class="digits">' + (this.point.CurrentValue ? Math.pow(r, this.point.CurrentValue).toAbsFixed(0) : "-") + "<\/span><\/div>", n += '<div><span class="firstchild">Max<\/span><span class="digits">' + (this.point.high ? Math.pow(r, this.point.high).toAbsFixed(0) : "-") + "<\/span><\/div>", n += '<div><span class="firstchild">75th Percentile<\/span><span class="digits">' + (this.point.q3 ? Math.pow(r, this.point.q3).toAbsFixed(0) : "-") + "<\/span><\/div>", n += '<div><span class="firstchild">Median<\/span><span class="digits">' + (this.point.median ? Math.pow(r, this.point.median).toAbsFixed(0) : "-") + "<\/span><\/div>", n += '<div><span class="firstchild">25th Percentile<\/span><span class="digits">' + (this.point.q1 ? Math.pow(r, this.point.q1).toAbsFixed(0) : "-") + "<\/span><\/div>", n += '<div class="lastchild"><span class="firstchild">Min<\/span><span class="digits">' + (this.point.low ? Math.pow(r, this.point.low).toAbsFixed(0) : "-") + "<\/span><\/div>") : (n += '<div><span class="firstchild">Current Value<\/span><span class="digits">' + (this.point.CurrentValue ? this.point.CurrentValue.toAbsFixed(0) : "-") + "<\/span><\/div>", n += '<div><span class="firstchild">Max<\/span><span class="digits">' + (this.point.high ? this.point.high.toAbsFixed(0) : "-") + "<\/span><\/div>", n += '<div><span class="firstchild">75th Percentile<\/span><span class="digits">' + (this.point.q3 ? this.point.q3.toAbsFixed(0) : "-") + "<\/span><\/div>", n += '<div><span class="firstchild">Median<\/span><span class="digits">' + (this.point.median ? this.point.median.toAbsFixed(0) : "-") + "<\/span><\/div>", n += '<div><span class="firstchild">25th Percentile<\/span><span class="digits">' + (this.point.q1 ? this.point.q1.toAbsFixed(0) : "-") + "<\/span><\/div>", n += '<div class="lastchild"><span class="firstchild">Min<\/span><span class="digits">' + (this.point.low ? this.point.low.toAbsFixed(0) : "-") + "<\/span><\/div>"), n + '<\/div><div class="boxCart-arrow"><\/div><\/div>'
                    }
                },
                plotOptions: {
                    boxplot: {
                        fillColor: "#b2d464",
                        pointWidth: 43,
                        color: "#2b2a2a",
                        lineWidth: .75,
                        medianColor: "#2b2a2a",
                        medianWidth: .75,
                        stemColor: "#2b2a2a",
                        stemWidth: .75,
                        whiskerColor: "#2b2a2a",
                        whiskerLength: "10%",
                        whiskerWidth: .75
                    }
                },
                xAxis: {
                    lineColor: "#bfbfbf",
                    gridLineWidth: 0,
                    tickWidth: 0,
                    categories: h,
                    labels: {
                        staggerLines: 1,
                        style: {
                            fontFamily: '"Whitney A", "Whitney B"',
							fontStyle: "italic",
							fontWeight: '400',
							fontSize: "14px",
							lineHeight: '15px',
							letterSpacing: '0',
                            color: "#898b8e",
							textAlign: 'center',
							textTransform: 'none'
                        }
                    }
                },
                yAxis: {
                    lineWidth: 0,
                    gridLineWidth: 1,
                    gridLineColor: "#cccccc",
                    title: {
                        enabled: !1
                    },
                    tickWidth: 0,
                    tickInterval: r ? 1 : null,
                    labels: {
                        style: {
                            fontFamily: '"Whitney A", "Whitney B"',
							fontStyle: "italic",
							fontWeight: '400',
							fontSize: "14px",
							lineHeight: '15px',
							letterSpacing: '0',
                            color: "#898b8e",
							textAlign: 'center',
							textTransform: 'none'
                        },
                        formatter: function() {
                            return r ? Math.pow(r, this.value) : this.value
                        }
                    }
                },
                legend: {
                    enabled: !1
                },
                credits: {
                    enabled: !1
                },
                series: [{
                    name: "Observations",
                    data: o,
                    tooltip: {
                        headerFormat: "<em>Country Name {point.CountryName}<\/em><br/>"
                    }
                }, {
                    name: "Outliers",
                    type: "scatter",
                    color: "#005293",
                    dataLabels: {
                        enabled: !0,
                        backgroundColor: "#FFF",
                        borderWidth: 1,
                        borderStyle: "dot",
                        borderColor: "#bfbfbf",
                        formatter: function() {
                            return r ? Math.pow(r, this.y).toAbsFixed(0) : this.y.toAbsFixed(0)
                        },
                        style: {
                            fontFamily: '"Whitney A", "Whitney B"',
							fontStyle: "normal",
							fontWeight: '400',
							fontSize: "13px",
							lineHeight: '16px',
							letterSpacing: '0',
                            color: "#2b2a2a",
							textAlign: 'center',
							textTransform: 'none',
                            "stroke-Solid": "5,5"
                        },
                        y: -9
                    },
                    data: s,
                    enableMouseTracking: !1
                }]
            }, function() {})
        }
    })
}(jQuery);
/*JSON || (JSON = {});
JSON.stringify = JSON.stringify || function(n) {
        var i = typeof n,
            u, t, f, r;
        if (i != "object" || n === null) return i == "string" && (n = '"' + n + '"'), String(n);
        f = [];
        r = n && n.constructor == Array;
        for (u in n) t = n[u], i = typeof t, i == "string" ? t = '"' + t + '"' : i == "object" && t !== null && (t = JSON.stringify(t)), f.push((r ? "" : '"' + u + '":') + String(t));
        return (r ? "[" : "{") + String(f) + (r ? "]" : "}")
    },*/
/*    function(n) {
        n.fn.extend({
            generateImage: function (format, csvString, exportFileName,postData) {

            var action, output_format, data, callback, fileName;
									
			var cookieDomain = window.location.hostname.substr(window.location.hostname.indexOf('.'), window.location.hostname.length);
			
			//if(typeof exportConfigHost == 'undefined' || exportConfigHost == null) {
				
				var firstPart = window.location.hostname.substr(0, window.location.hostname.indexOf('.'));
				var secondPart = '' + cookieDomain;
				if(firstPart == 'dev-ex') {
					secondPart += ':90';
				}				
				else if(firstPart.indexOf('www') > -1) {
					firstPart = 'export';					
				}else{
					firstPart += '-export';
				}
				var exportConfigHost = "10.209.52.240:90";//firstPart + secondPart;
			//}
			
            if (format == 'CSV') {
                
				action = window.location.protocol + "//" + exportConfigHost + "/Exporting/ExportToCSV";

                output_format = exportFileName;
                data = escape(csvString);
            }
            else {

                $('.smenuWrpr').removeClass('show');
                $('.generateImg').removeClass('active');
               
                var highChartOptionsAction = window.location.protocol + "//" + exportConfigHost + "/Exporting/ExportHighChart";
                var baseballCardAction = window.location.protocol + "//" + exportConfigHost + "/Exporting/ExportFullWebPage";

                var highChart = $(this).highcharts();

                if (highChart != undefined) {
                    action = highChartOptionsAction;

                    output_format = format;
					var fields = null;
					if(highChart.userOptions.hiddenFieldOptions)
						fields = JSON.parse(unescape(highChart.userOptions.hiddenFieldOptions));
					else
						fields = highChart.userOptions.exportOptions;
					fields.ExportConfig = true;
                    data = escape(JSON.stringify(fields));
					// data = highChart.userOptions.hiddenFieldOptions;
                    callback = highChart.userOptions.customCallback;
                } else {
                    action = baseballCardAction;
                    output_format = format;
                    var portNo = location.port && location.port != '' ? (':' + location.port) : '';
                    data = 'http://www.researchaffiliates.com/assetallocation/_layouts/RA.AAMicrosite.Branding/AAGenerateImage.aspx?' + csvString;
                }
                if (exportFileName != null && exportFileName != undefined) {
                    fileName = exportFileName + "_" + $(this).attr('name');
                }
                else {
                    fileName = $(this).attr('name');
                }
            }
			var strData;
			if($(this).attr('data-is-post'))
			{
				strData = { 'output_format': output_format, 'url': data,'postData':JSON.stringify(postData) , 'customCallback': callback, 'file_name': fileName, 'cookieDomain': cookieDomain };
				action = action + "2";
			}
			else{
             strData = { 'output_format': output_format, 'data': data, 'customCallback': callback, 'file_name': fileName, 'cookieDomain': cookieDomain };
			}
            $('body').showWaitingPopup('generateImagePopup');
            $.fileDownload(action, {
                httpMethod: "POST",
				cookieDomain: cookieDomain,
                data: strData,
                dataType: 'image/png',
                successCallback: function (responseHtml, url) {
                    console.log("SUCCESS CALL BACK");
                    $('body').hideWaitingPopup('generateImagePopup');
					
							// if(highChart && highChart.customTooltipPoint)
								// ScatterPlotPointClick(highChart,highChart.customTooltipPoint);
                },
                failCallback: function (responseHtml, url) {
                    $('body').hideWaitingPopup('generateImagePopup');
                }
            });
            return false;

        }
        })
    }(jQuery),*/
    (function ($) {
		var keys = [37, 38, 39, 40];		

		function disable_scroll() {
		  if (window.addEventListener) {
			  window.addEventListener('DOMMouseScroll', preventWheel, false);
		  }
		  window.onmousewheel = document.onmousewheel = preventWheel;
		  document.onkeydown = preventKeydown;
		}

		function enable_scroll() {
			if (window.removeEventListener) {
				window.removeEventListener('DOMMouseScroll', preventWheel, false);
			}
			window.onmousewheel = document.onmousewheel = document.onkeydown = null;  
		}
    $.fn.extend({
		showWaitingPopup: function(popupId) {
		
		var me = this;
		function appendControlToBody() {			
			$("body>#" + popupId).remove();				
			$("body").append(getHTML());			
		}
		
		function getHTML() {
			 var waitingPopup = $('<div id="' + popupId + '" class="waiting-popup"></div>');
			 var waitingPopupPanel = $('<div class="waiting-popup-panel"></div>');
			 var waitingPopupImage = $('<img class="waiting-popup-image" src="http://researchaffiliates.com/_layouts/images/RA.ExternalWeb/ajax-loader.gif"></img>');
			 return $(waitingPopup).append(waitingPopupPanel).append(waitingPopupImage);
		}
		
		function initObjects() {

			me.waitingPopup = $("#" + popupId).get(0);        
			me.waitingPopupPanel = $(me.waitingPopup).find(".waiting-popup-panel").get(0);
			me.waitingPopupImage = $(me.waitingPopup).find(".waiting-popup-image").get(0);
			
			if (me.waitingPopupImage != null && me.waitingPopupImage != undefined) {
				$(me.waitingPopupImage).width(100).height(100);
			}
			$(me.waitingPopupPanel).css({width: '100%', height: '100%'});
			$(me.waitingPopup).hide();
		}
		
		function renderWaitingPopup() {
			set_dimensions();
			set_position();
			set_popupImageLocation();			
			$(me.waitingPopup).css({ "z-index": max_zindex() + 1 });
		}
				   
		function set_dimensions() {
			$(me.waitingPopup).css({
				"height": get_targetElementHeight() + "px",
				"width": get_targetElementWidth() + "px"
			});
		}
	   
		function set_position() {
			var location = get_targetLocation();        
			setLocation(me.waitingPopup, Math.ceil(location.x), Math.ceil(location.y));
		}
		
		function get_targetElementWidth() 
		{
		if($(me)[0].tagName.toLowerCase() == 'body'){
			return $(window).width();
		}else{
				return $(me).width();
			}
		}
		
		function get_targetElementHeight() 
		{
			if($(me)[0].tagName.toLowerCase() == 'body'){
				return $(window).height();
			}else{
				return $(me).height();
				}
		}
		
		function get_targetLocation() 
		{
			if($(me)[0].tagName.toLowerCase() == 'body'){
				return {x: $(window).scrollLeft(), y: $(window).scrollTop()};
			}else{
				 var location = getLocation(me);        
				var jQueryLocation = $(me).offset();

				// For Chrome Position Difference Fix
				location.x = location.x < jQueryLocation.left ? jQueryLocation.left : location.x;
				location.y = location.y < jQueryLocation.top ? jQueryLocation.top : location.y;

				return location;
			}
		}
		
		function set_popupImageLocation() {

			var width = get_targetElementWidth();
			var height = get_targetElementHeight();
			 var imageWidth = 100, imageHeight = 100;
			setLocation(me.waitingPopupImage, Math.ceil((width / 2) - (imageWidth / 2)), Math.ceil((height / 2) - (imageHeight / 2)));
		}
	
		function max_zindex() {
			var maxZ = 1;
			maxZ = Math.max.apply(null, $.map($('body *'), function (e, n) {
				if ($(e).css('position') == 'absolute')
					return parseInt($(e).css('z-index')) || 1;
			})
			);
			if (maxZ == undefined || maxZ == null)
				maxZ = 1;
			return maxZ;
		}
		
		function setLocation (element, x, y) {
			if(!element) return;
			var style = element.style;
			style.position = 'absolute';
			style.left = x + "px";
			style.top = y + "px";
		}

		function getLocation(element) {
			var location = $(element).offset();
			return { x: location.left, y: location.top };
		}
		
			appendControlToBody();
			initObjects();
			renderWaitingPopup();			
			$(me.waitingPopup).show();
						
			if($(me)[0].tagName.toLowerCase() == 'body'){
				disable_scroll();
			}
		},
		
		hideWaitingPopup: function(popupId) {
            console.log("Hide Waiting Popup");
			$("body>#" + popupId).remove();	
			if($(this)[0].tagName.toLowerCase() == 'body'){
				enable_scroll();
			}
		}
        
    });

})(jQuery),
    function(n) {
        window.AAGlobal = window.AAGlobal || {};
        n.fn.extend({
            loadHeatMapChart: function (correlationData, volatilityData, correlationtype, hideDataLabels, chartTitles, showDescription) {
                var me = this;

                var defaults = new AAGlobal.RisksHeatMapChartConfig(correlationtype, hideDataLabels);
                     var defaults;
                    if((isiPad || isPhone) && window.innerWidth< 979){
                            defaults = new AAGlobal.RisksHeatMapMobileChartConfig(correlationtype, hideDataLabels);
                        }
                        else{
                            defaults = new AAGlobal.RisksHeatMapChartConfig(correlationtype, hideDataLabels);
                        }

                    var options = $.extend(defaults, options);

                //$(me).width(options.Width).height(options.Height);
                    $(me).height(576);

                var seriesData = options.GetSeriesData(correlationData, volatilityData);
                var xAxisCategories = options.GetCategories(correlationData, volatilityData);

                var chartOptions = options.GetConfiguration(seriesData, xAxisCategories);
                if (chartTitles) {
                    chartOptions.title.text = chartTitles.Title;
                    chartOptions.subtitle.text = chartTitles.SubTitle;
                }
                var exportOptions = $.extend(true, {}, chartOptions);
                exportOptions.credits.enabled = true;
                exportOptions.credits.LogoUrl = 'http://' + window.location.hostname + '/content/dam/ra/images/highcharts/AA/ra_blue_logo.png';
                if (exportOptions.series[0] && exportOptions.series[0].dataLabels) {
                    exportOptions.series[0].dataLabels.enabled = true;
                }
                if (showDescription && showDescription.toLowerCase() == "true") {
                    var filterHeight = 60;
                     exportOptions.chart.spacingTop -= (filterHeight);
                    exportOptions.title.y += (filterHeight);
                    exportOptions.subtitle.y += (filterHeight);
                }
                else {
                    var filterHeight = 60;
                    var subTitleHeight = 30;
                    exportOptions.chart.spacingTop -= (filterHeight + subTitleHeight);
                    exportOptions.title.y += (filterHeight + subTitleHeight);
                    exportOptions.subtitle.text = '';
                }
                exportOptions.chart.width = 970;
                exportOptions.chart.height = 750;
                exportOptions.exporting.sourceWidth = null;
                exportOptions.exporting.sourceHeight = null;
                exportOptions.exporting.scale = 1;
                exportOptions.credits.enabled = true;
                exportOptions.credits.position.x = 10;
                exportOptions.credits.style.width = exportOptions.chart.width - 10;
                chartOptions.hiddenFieldOptions = escape(JSON.stringify(exportOptions));
                chartOptions.customCallback = options.Callback.toString();
                chartOptions.title.text = ""; 
                chartOptions.subtitle.text = "";
                chartOptions.credits.enabled = false;
                chartOptions.chart.marginTop = 23;
                chartOptions.chart.marginBottom = 250;
                chartOptions.chart.spacingTop = 33;
                $(me).highcharts(chartOptions, function (chart) { // on complete

                    options.Callback(chart);
                });
                

            }
        })
    }(jQuery),
    function(n) {
        n.fn.extend({
            loadYieldCurveChart: function(i, r) {
                var f = this,
                    o = new AAGlobal.YieldCurveCountriesChartConfig(f, i, r),
                    r = n.extend(o, r);
                //n(f).width(r.Width).height(r.Height);
                n(f).height(576);
                var s = r.GetSeriesData(),
                    h = r.GetCategories(),
                    u = r.GetConfiguration(t(s, r), h),
                    e = n.extend(!0, {}, u);
                e.credits.enabled = !0;
                u.hiddenFieldOptions = JSON.stringify(e);
                u.customCallback = r.Callback.toString();
                n(f).highcharts(u, function(t) {
                    r.Callback(t);
                    n(r.DefaultTooltipSelector).css("padding-left", t.plotLeft)
                });
                r.AddDisclosure(this)
            }
        });
        var t = function(t, i) {
            var r = [];
            return n.each(t, function(n, t) {
                var u = i.Categories[n];
                r.push(i.GetSplineSeriesData(u, t))
            }), r
        }
    }(jQuery),
    function(n) {
        n.fn.extend({
            loadModelPortfolios: function (data, options) {
            var currentValue = $(this).find("option:selected").attr('value')
            var groupedData = $.Enumerable.From(data).Where(function (rec) {
                return rec.IsHubPortfolioModel || rec.IsCustomPortfolio
            }).GroupBy('$.GroupName').ToArray();
            var options = "<option value='None'>MODEL & EFFICIENT PORTFOLIOS</option>";
            $.each(groupedData, function (index, groupedItem) {
                var key = groupedItem.Key();
                if (key == "MODEL PORTFOLIO")
                    options += '<optgroup label="Model Portfolios">';
                else if (key == "EFFICIENT PORTFOLIO")
                    options += '<optgroup label="Efficient Portfolios">';

                groupedItem.source.sort(function (o1, o2) {
                    return naturalSorter(o1.DisplayName, o2.DisplayName);
                });
                $.each(groupedItem.source, function (index, item) {
                    if (key != "CUSTOM PORTFOLIO") {
                        options += "<option data-return='" + item.ExpectedReturn + "' value='" + item.ReferenceCode + "'>" + item.DisplayName + "</option>";
                    }
                });
                options += '</optgroup>';
            });
            /*   groupedData.forEach(function (groupedItem, index) {
            var key = groupedItem.Key();
            if (key == "MODEL PORTFOLIO")
            options += '<optgroup label="Model Portfolios">';
            else if (key == "CUSTOM PORTFOLIO")
            options += '<optgroup label="Custom Portfolios">';
            else
            options += '<optgroup label="Efficient Portfolios">';
            $.each(groupedItem.source, function (index, item) {
            options += "<option data-return='" + item.ExpectedReturn + "' value='" + item.ReferenceCode + "'>" + item.DisplayName + "</option>";
            });
            options += '</optgroup>';
            }); */



            $(this).html(options)
            $(this).val(currentValue);
        },
        loadAssetClasses: function (assetClasses, weights, basketCode, returnValue) {

            var cashAlocationWrpr = '';
            var sliders = "";
            var groupedAssetClasses = $.Enumerable.From(assetClasses)
                .Where(function (rec) { return rec.HubPortfolioName })
                .OrderBy(function (a) { return AAGlobal.GroupConfig[a.HubPortfolioName] ? AAGlobal.GroupConfig[a.HubPortfolioName].Rank : 10; })
                .GroupBy("$.HubPortfolioName").ToArray();

            var usCashSlider = "<span class='assetClassGroup'></span>";
            var weights1;
            var usCashWeight = 0;
            var data = [];
            if (basketCode && basketCode != "None") {
                weights1 = $.Enumerable.From(weights).Where(function (r) {
                    return r.BasketCode == basketCode
                }).ToArray();
                window.toggleReset = true;
                var myToggle = $('.toggle').data('toggles');
                myToggle.toggle((weights1[0].AreConstraintsDisabled ? false : true));
                window.toggleReset = false;
            } else {
                weights1 = null; //need to set default weights
            }
            var controlNumber = 0;
            $.each(groupedAssetClasses, function (index, groupedItem) {

                var key = groupedItem.Key();
                var totalWeight = 0;
                if (key == "US Cash") {
                    var sortedSource = $.Enumerable.From(groupedItem.source).OrderBy("$.Volatility").ToArray();
                    $.each(sortedSource, function (index, val) {

                        if (weights1 && weights1.length > 0) {
                            $.each(weights1, function (i, w) {
                                if (w.IndexCode == val.ReferenceCode) {
                                    usCashWeight = w.Weight;
                                }
                            });
                        }
                        else {
                            usCashWeight = 100;
                        }

                        //sliders += '<div class="assetRow" data-group="' + key + '"><span class="assetClass" data-tooltip="' + val.DisplayName + '" data-code="' + val.ReferenceCode + '">' + 'CASH' + '</span><span class="assetReturns">' + val.ExpectedReturn.toFixed(1) + '%</span><span class="assetvolatility">' + val.Volatility.toFixed(1) + '%</span><div class="slider"><input class="single-slider-us-cash" type="hidden" value="0"/> <span class="percentValue">0</span><span class="percentValueHidden">0</span></div></div>';
                        cashAlocationWrpr += '<span class="cash-allocation-icon"></span><span class="cash-allocation" data-code="' + val.ReferenceCode + '">Cash Remaining</span><div class="progressbar"></div><span class="percentValue">0</span><span class="percentValueHidden">0</span><span class="fullyAllocated">(FULLY ALLOCATED)</span>';
                        cashAlocationWrpr += '</br><span class="cash-expected-return">Expected Return: <span class="cash-expected-return-value">' + val.ExpectedReturn.toFixed(1) + '%</span></span><span class="cash-volatility">Volatility: <span class="cash-volatility-value">' + val.Volatility.toFixed(1) + '%</span></span>';
                        totalWeight = usCashWeight;
                    });
                } else {
                    var sliderRows = "";
                    var sortedSource = $.Enumerable.From(groupedItem.source).OrderBy("$.Volatility").ToArray();

                    $.each(sortedSource, function (index, val) {
                        var weight = 0;
                        controlNumber = controlNumber + 1;
                        if (weights1) {
                            $.each(weights1, function (i, w) {
                                if (w.IndexCode == val.ReferenceCode) {
                                    weight = w.Weight;
                                }
                            });
                        }
                        totalWeight += weight;
                        var maxValue = AAGlobal.GroupConfig[key].MaxAssetWeight;
                        var maxVal = $.Enumerable.From(AAGlobal.DefaultWeights).FirstOrDefault({}, function (record) {
                            return record.ReferenceCode == val.ReferenceCode;
                        }).Weight;
                        //maxVal = window.constraintsDisabled?100:maxVal;
                        //console.log( weight.toFixed(2));
                        sliderRows += '<div class="assetRow" data-group="' + key + '" data-row="' + index + '"><span class="assetClass" data-tooltip="' + val.DisplayName + '" data-code="' + val.ReferenceCode + '">' + val.ShortDisplayName + '</span><span class="assetReturns">' + val.ExpectedReturn.toFixed(1) + '%</span><span class="assetvolatility">' + val.Volatility.toFixed(1)
						+ '%</span><span class="assetWeight"><div class="input-group"><span class="input-group-btn"><button type="button" class="btn btn-number" disabled="disabled" data-type="minus" data-field="' + (controlNumber) + '">-</button></span><input type="number" name="' + (controlNumber) + '" class="form-control input-number percentValueInput" value="' + weight.toFixed(1) + '" min="0" max="' + maxVal + '" />'
						+ '<span class="maxValue" data-maxVal="' + maxVal + '"> Max:' + maxVal + '%</span><span class="percentValueInputHidden">' + weight.toFixed(2) + '</span><span class="input-group-btn"><button type="button" class="btn btn-number" data-type="plus" data-field="' + (controlNumber) + '">+</button></span></div><span class="warningMsg" style="display:none;"></span></span></div>';

                    });
                    var totalWeightStr = (totalWeight > 0) ? totalWeight.toFixed(1) + "%" : "0";
                    var maxGroupVal = AAGlobal.GroupConfig[key].MaxWeight;
                    //maxGroupVal = window.constraintsDisabled?100:AAGlobal.GroupConfig[key].MaxWeight;
                    sliders += '<div class="assetClassContainer"><div class="assetClassGroupHide ' + key.replace(/ /g, '') + '"><div class="accHeaderHide"></div><div class="assetGroupHide" data-group="' + key.replace(/ /g, '') + '" ><div class="sliderHeaderHide"><span></span></div><div class="assetRowHide" data-row="0"><span class="value" style="display:none;"></span></div><div class="assetRowHide" data-row="1"><span class="value" style="display:none;"></span></div><div class="assetRowHide" data-row="2"><span class="value" style="display:none;"></span></div><div class="assetRowHide" data-row="3"><span class="value" style="display:none;"></span></div></div></div><div class="assetClassGroup ' + key.replace(/ /g, '') + '" data-group="' + key + '"><div class="accHeader">' + key + '<span class="collapseExpand"></span></div><div class="assetGroup" data-group="' + key.replace(/ /g, '') + '"><div class="sliderHeader" data-group="' + key + '"><span class="assetClassHeader" >Asset Class</span><span class="assetReturnsHeader">Expected</br>Returns</span><span class="assetVolatilityHeader">Volatility</span><span class="assetWeightHeader">Weight</span><span class="maxValue">' + maxGroupVal + '</span></div>';

                    sliders += sliderRows + '</div></div></div>';
                }
                data.push({
                    name: key,
                    y: parseFloat(parseFloat(totalWeight).toFixed(1)),
                    color: AAGlobal.GroupConfig[key].Color
                });

            });

            initialLoad = true;
            $(this).html(sliders);
            $('#cashAlocationWrpr').html(cashAlocationWrpr);

            //call cash
            setUSCashSlider(usCashWeight);
            isSelectionChanged = false;
            initialLoad = false;
            $(".assetRow").mouseleave(function () {
                if (!($(this).find(".percentValueInput").is(":focus"))) {
                    $(this).find('.maxLimit').removeClass('active').hide('800');
                }
            });

        },
        loadProgressBar: function () {
            $(this).progressbar({ value: 100 });
        },
        loadSavedPortfolios: function (data, options) {
            data = $.Enumerable.From(data).Where(function (rec) {
                return rec.IsCustomPortfolio;
            }).ToArray();
            var customPortfoliosTemplate = $('#customPortfoliosTemplate').html();
            window.divcolor = '#d1d2d4';
            var templateHtmlString = '<select class="customPortfolios"><option value="MY PORTFOLIOS">MY PORTFOLIOS</option>';
            var templateData = {items: data, color: function () {return window.divcolor = window.divcolor == '#fff' ? '#d1d2d4' : '#fff'}}
            /*$(this).html(Mustache.to_html(customPortfoliosTemplate, {
                items: data, color: function () {
                    return window.divcolor = window.divcolor == '#fff' ? '#d1d2d4' : '#fff'
                }
            }));*/

            for(var i=0; i< templateData.items.length; ++i){
                var item = templateData.items[i];
                templateHtmlString += '<option class="portfolio-name" data="' + item.ReferenceCode + '" value="' + item.DisplayName + '" >' + item.DisplayName + '</option>'
            }
            templateHtmlString += '</select>';
            
            $(this).html(templateHtmlString);
            
            $('.customPortfolios').val($('.new-portfolio-name').text().trim())
            if ($.Enumerable.From(data).Any("$.AreConstraintsDisabled"))
                $("#legendMyPortfolios").show(0);
            else
                $("#legendMyPortfolios").hide(0);
        },
        loadDonutChart: function (data, point) {
            point = point ? (parseFloat(point).toFixed(1) + "%") : "0.0%";
            var title = 'EXPECTED<br>RETURN<br>';
            if (parseFloat(point) > 0) {
                title += '<span class="expectedReturns" style="color:green;">' + point + '</span>';
            }
            else if (parseFloat(point) < 0) {
                title += '<span class="expectedReturns" style="color:red;">' + point + '</span>';
            }
            else
                title += '<span class="expectedReturns" style="color:black;">' + point + '</span>';

            $(this).highcharts({
                chart: {
                    type: 'pie',
                    margin: [0, 0, 50, 0],
                    spacingTop: 0,
                    spacingBottom: 0,
                    spacingLeft: 0,
                    spacingRight: 0,
                    events: {
                        load: function () {
                            $("id*=piechartPath").remove();

                            var series = this.series[0];
                            var inOffset = 40;
                            var diff = 15, newX, newY;
                            var chart = this;
                            var count = 0;
                            var oriX = 112;
                            var oriY = 100;
                            var xo = 0, yo = 0;
                            $.each(series.data, function (i, o) {
                                if (o.y == 0) {
                                    o.dataLabel.hide();
                                }
                                else if (o.y < 5) {
                                    if (o.dataLabel.translateY > oriY) {
                                        newY = o.dataLabel.y + inOffset + diff * count
                                        yo = 15;
                                    }
                                    else {
                                        newY = o.dataLabel.y - inOffset - diff * count
                                        yo = 25;
                                    }
                                    if (o.dataLabel.translateX > oriX) {
                                        newX = o.dataLabel.x + inOffset + diff * count
                                        xo = 25;
                                    }
                                    else {
                                        newX = o.dataLabel.x - inOffset - diff * count
                                        xo = 40;
                                    }


                                    chart.renderer.path(['M', 25 + o.dataLabel.translateX, 25 + o.dataLabel.translateY,
								  xo + newX,
								 yo + newY])
								.attr({
								    'stroke-width': 1,
								    stroke: rgbToHex(o.color),
								    id: 'piechartPath' + i,
								    zIndex: 44
								})
        .add();
                                    $(o.dataLabel.div).find('span').css('color', rgbToHex(o.color));
                                    o.dataLabel.translate(newX,
									newY);
                                    count++;
                                }
                            });
                        }

                    }
                },
                credits: { enabled: false },
                title: {
                    text: title,
                    align: 'center',
                    verticalAlign: 'middle',
                    y: -32,
                    useHTML: true,
                    style: {
                        fontSize: '14px',
                        fontFamily: 'Arial',
                        fontWeight: 'bold',
                        textAlign: 'center'
                    }
                },
                yAxis: {
                    title: {
                        text: 'Total percent'
                    }
                },
                xAxis: {
                    title: {
                        text: 'Total percent'
                    }
                },
                plotOptions: {
                    series: {
                        states: { hover: { enabled: false } }
                    },
                    pie: {
                        shadow: false,
                        size: '100%',
                        center: ['50%', '50%'],
                        showInLegend: true,

                        dataLabels: {
                            enabled: true,
                            format: '{point.percentage:.1f} %',
                            crop: false,
                            overflow: 'none',
                            distance: -25,
                            useHTML: true,
                            style: { fontSize: '12px', color: "#FFFFFF", fontWeight: 'bold' }
                        }
                    }
                },
                tooltip: {
                    enabled: false
                },

                legend: {
                    enabled: true,
                    layout: 'horizontal',
                    align: 'center',
                    verticalAlign: 'bottom',
                    itemWidth: 110,
                    itemMarginBottom: 5,
                    itemStyle: {
                        cursor: 'auto',
                        fontFamily: 'Arial',
                        fontSize: '10px',
                        textTransform: 'uppercase'
                    },
                    labelFormatter: function () {
                        return this.name;
                    }
                },
                series: [{
                    name: 'Asset Class',
                    data: data,
                    size: '100%',
                    innerSize: '60%',
                    point: {
                        events: {
                            legendItemClick: function () {
                                return false;
                            }
                        }
                    }

                }]
            });
        }
		, editPortfolio: function (portfolioId, name, portfolioContainer, portfolioSelector, refreshData) {
		    if (refreshData) {
		        AAGlobal.HeroChartData = $.Enumerable.From(AAGlobal.HeroChartData).Where(function (rec) {
		            return rec.ReferenceCode != portfolioId;
		        }).ToArray();
		        AAGlobal.WeightsData = $.Enumerable.From(AAGlobal.WeightsData).Where(function (rec) {
		            return rec.BasketCode != portfolioId;
		        }).ToArray();

		        var storedPortfolios = amplify.store("customPortfolios");
		        if (storedPortfolios) {
		            storedPortfolios = JSON.parse(storedPortfolios);
		            storedPortfolios = $.Enumerable.From(storedPortfolios).Where(function (rec) {
		                return rec.BasketCode != portfolioId;
		            }).ToArray();
		            amplify.store("customPortfolios", JSON.stringify(storedPortfolios));
		        }
		        $(".new-portfolio-name").savePortfolio(name, $(".portfolio-selector"), $('#savedPortfolios'));
		    }
		    else {
		        $.each(AAGlobal.HeroChartData, function (i, rec) {
		            if (rec.ReferenceCode == portfolioId) {
		                rec.DisplayName = name;
		                rec.ShortDisplayName = name;
		            }
		        });
		        $.each(AAGlobal.WeightsData, function (i, rec) {
		            if (rec.BasketCode == portfolioId) {
		                rec.BasketShortDisplayName = name; // 
		                rec.BasketDisplayName = name;
		            }
		        });

		        var storedPortfolios = amplify.store("customPortfolios");
		        if (storedPortfolios) {
		            storedPortfolios = JSON.parse(storedPortfolios);
		            $.each(storedPortfolios, function (i, rec) {
		                if (rec.BasketCode == portfolioId) {
		                    rec.BasketShortDisplayName = name; // 
		                    rec.BasketDisplayName = name;
		                }
		            });

		            amplify.store("customPortfolios", JSON.stringify(storedPortfolios));
		        }
		    }
		    //update saved list
		    portfolioContainer.loadSavedPortfolios(AAGlobal.HeroChartData);
		    //update dropdown 
		    portfolioSelector.loadModelPortfolios(AAGlobal.HeroChartData);
		}
		, savePortfolio: function (name, portfolioSelector, portfolioContainer) {
		    //get portfolio info
		    var portfolio = generatePortfoiloObj(name);
		    var customportRet = AAGlobal.CalculateCustomPortfolioData(portfolio);
		    AAGlobal.HeroChartData.push(customportRet);
		    AAGlobal.WeightsData = AAGlobal.WeightsData.concat(portfolio);
		    //Save it to localstorage
		    var storedPortfolios = amplify.store("customPortfolios");
		    if (storedPortfolios) {
		        storedPortfolios = JSON.parse(storedPortfolios);
		        storedPortfolios = storedPortfolios.concat(portfolio);
		    }
		    else
		        storedPortfolios = portfolio;

		    amplify.store("customPortfolios", JSON.stringify(storedPortfolios));
		    //update saved list
		    portfolioContainer.loadSavedPortfolios(AAGlobal.HeroChartData);
		    //update dropdown 
		    portfolioSelector.loadModelPortfolios(AAGlobal.HeroChartData);
		    if (portfolio.length > 0)
		        $(this).attr('data', portfolio[0].BasketCode);
		}
		, nodoubletapzoom: function () {
		    $(this).bind('touchstart', function preventZoom(e) {
		        var t2 = e.timeStamp
				  , t1 = $(this).data('lastTouch') || t2
				  , dt = t2 - t1
				  , fingers = e.originalEvent.touches.length;
		        $(this).data('lastTouch', t2);
		        if (!dt || dt > 500 || fingers > 1) return; // not double-tap

		        e.preventDefault(); // double tap - prevent the zoom
		        // also synthesize click events we just swallowed up
		        $(this).trigger('click').trigger('click');
		    });
		}
		  , animateRotate: function (angle, duration, easing, complete) {
		      var args = $.speed(duration, easing, complete);
		      var step = args.step;
		      return this.each(function (i, e) {
		          args.complete = $.proxy(args.complete, e);
		          args.step = function (now) {
		              $.style(e, 'transform', 'rotate(' + now + 'deg)');
		              if (step) return step.apply(e, arguments);
		          };

		          $({ deg: 0 }).animate({ deg: angle }, args);
		      });
		  }
        })
    }(jQuery);

function loadProgressChart() {
    sumEquity = 0;
    sumCoreBonds = 0;
    sumCredit = 0;
    sumAlternatives = 0;

    $('input[type=number]').each(function () {
        if (parseFloat($(this).attr('name')) >= 1 && parseFloat($(this).attr('name')) <= 4) {
            sumEquity = sumEquity + parseFloat($(this).siblings('.percentValueInputHidden').text());
        } else if (parseFloat($(this).attr('name')) >= 5 && parseFloat($(this).attr('name')) <= 8) {
            sumCoreBonds = sumCoreBonds + parseFloat($(this).siblings('.percentValueInputHidden').text());
        } else if (parseFloat($(this).attr('name')) >= 9 && parseFloat($(this).attr('name')) <= 12) {
            sumCredit = sumCredit + parseFloat($(this).siblings('.percentValueInputHidden').text());
        } else if (parseFloat($(this).attr('name')) >= 13 && parseFloat($(this).attr('name')) <= 16) {
            sumAlternatives = sumAlternatives + parseFloat($(this).siblings('.percentValueInputHidden').text());
        }
    })

    var usCash = (100 - (sumEquity + sumCoreBonds + sumCredit + sumAlternatives)).toFixed(0);
    if (parseInt(usCash) < 7) {
        $('#usCashEffect .percentageValueCash').hide();
    }
    else {
        $('#usCashEffect .percentageValueCash').text((parseInt(usCash) < 12) ? usCash + '%' : 'US CASH, ' + usCash + '%').show();
    }
    containerWidth = (containerWidth) ? containerWidth : ($('#PortfolioViewContainer').width() - 66);
    //Render Equity section of progress chart
    if (sumEquity >= 7) {
        $('#equityEffect .percentageValue').text((sumEquity > 10) ? 'EQUITY, ' + sumEquity.toFixed(0) + '%' : sumEquity.toFixed(0) + '%').show();
    } else {
        $('#equityEffect .percentageValue').hide();
    }

    //Render Core Bonds section of progress chart
    if (sumCoreBonds > 7) {
        $('#coreBondsEffect .percentageValue').text((sumCoreBonds > 15) ? 'CORE BONDS, ' + sumCoreBonds.toFixed(0) + '%' : sumCoreBonds.toFixed(0) + '%').show();
    } else {
        $('#coreBondsEffect .percentageValue').hide();
    }

    //Render Credit section of progress chart
    if (sumCredit > 7) {
        $('#creditEffect .percentageValue').text((sumCredit > 10) ? 'CREDIT, ' + sumCredit.toFixed(0) + '%' : sumCredit.toFixed(0) + '%').show();;
    } else {
        $('#creditEffect .percentageValue').hide();
    }

    //Render Alternatives section of progress chart
    if (sumAlternatives > 7) {
        $('#alternativeEffect .percentageValue').text((sumAlternatives > 15) ? 'ALTERNATIVES, ' + sumAlternatives.toFixed(0) + '%' : sumAlternatives.toFixed(0) + '%').show();
    } else {
        $('#alternativeEffect .percentageValue').hide();
    }
	$("#equityEffect").animate({
		backgroundColor: "#eb9494",
		width: (sumEquity / 100) * ($('.allocationContainer').width())
	}, 500);
	$("#coreBondsEffect").animate({
		backgroundColor: "#b1ddf6",
		width: (sumCoreBonds / 100) * ($('.allocationContainer').width())
	}, 500);
	$("#creditEffect").animate({
		backgroundColor: "#fedc67",
		width: (sumCredit / 100) * ($('.allocationContainer').width())
	}, 500);
	$("#alternativeEffect").animate({
		backgroundColor: "#b2d464",
		width: (sumAlternatives / 100) * ($('.allocationContainer').width())
	}, 500);

    SetExpReturnAndVolatility(false);

    //Enable disable incremental buttons
    $('.btn[data-type=minus]').each(function (index) {
        fieldName = $(this).attr('data-field');
        var input = $("input[name='" + fieldName + "']");
        if (parseInt(input.val()) == input.attr('min')) {
            $(this).attr('disabled', true);
        }
        else {
            $(this).attr('disabled', false);
        }
    });
}

$(document).on("blur",".new-portfolio-name", function() {
    clearSelection();
    $(this).removeAttr('contenteditable').removeClass('contenteditable');
    $(this).parent().find('.rename-portfolio').removeAttr('isclicked');
    var pname = $(this).text().trim();
    var pdata = $(this).attr('data');
    if (pname.length > 20 || pname.length == 0 || pname == 'Name your Portfolio') {
        $(this).text($(this).attr('data-prev-val'));
        $('#new-portfolio-name-message').text('Portfolio name can have maximum 20 characters and atleast 1 character.').show(0);
        //$(this).attr('contenteditable', 'true').addClass('contenteditable');
        //$(this).focus();
        return false;
    }
    var isDuplicate = false;
    $.each($('.customPortfolios > option'), function (i, o) {

        if ($(o).val().toLowerCase() == pname.toLowerCase() && $(o).attr('data') != pdata) {
            isDuplicate = true;
        }
    });

    if (isDuplicate) {

        $(this).text($(this).attr('data-prev-val'));
        $('#new-portfolio-name-message').text('Portfolio name is already in use.').show(0);
        $(this).attr('contenteditable', 'true').addClass('contenteditable');
        $(this).focus();
        return false;
    }

    $('#new-portfolio-name-message').hide();
    if ($(this).attr('data-prev-val') != $(this).text())
        $(this).editPortfolio($(this).attr('data'), pname, $('#savedPortfolios'), $(".portfolio-selector"));
});
clickEvent = isPhone ? "touchend" : "focus";
$(document).on(clickEvent,".new-portfolio-name", function() {
    var el = this;
    requestAnimationFrame(function () {
        selectElementContents(el);
    });
    //window.PortfolioSaveDialog.o.escClose = false;
});
$(document).on("blur",".new-portfolio-name", function() {
		RemoveFocusPortfolioName($(this))
});
$(document).on('click',".accHeader", function (e) {
    e.preventDefault();
    if (isiPad) {
        var section = $(this).next();
        var dataGroup = section.attr('data-group');
        if (section.is(':visible')) {
            section.hide(500);
            $('.assetGroupHide[data-group=' + dataGroup + ']').hide(500);
            $(this).find('.collapseExpand').removeClass('expand');
        } else {
            section.show(500);
            $('.assetGroupHide[data-group=' + dataGroup + ']').show(500);
            $(this).find('.collapseExpand').addClass('expand');
        }
    }
});
$(document).on("click",".percentValueInput", function(n) {
    n.preventDefault()
});
$(document).on("keydown",".percentValueInput", function(e) {
    if ($(this).val().length > 4) {
        $(this).val($(this).val().substring(0, 4));
    }
    var target = e ? e.target : window.event.srcElement;
    var keyCode = e.which || e.keyCode;
    if (keyCode == 13) {
        if ($(target).val() == "0.0" || $(target).val() == "") {
            return false;
        }
        target.blur();
        return false;
    }
});
$(document).on("keydown",".save-portfolio1", function(e) {
    if (e.which === 9) {
        e.preventDefault();
        var firstAllocation = $(".assetRow:first").find(".percentValueInput");
        firstAllocation.focus();
        $('html, body').animate({
            scrollTop: (firstAllocation.offset().top - 50)
        }, 800);
    }
});
$(document).click(function(e) {
    if ($(e.target).closest('.assetRow').length === 0) {
        if ($(this).find('.maxLimit.active').length) {
            $(this).find('.maxLimit').removeClass('active').hide('800');
        }
    }
});
$(document).on(clickEvent,".percentValueInput", function(n) {
    /*n.preventDefault();
    var t = this;
    requestAnimationFrame(function() {
        selectElementContents(t)
    });
    $(this).closest("#portfolio").find(".maxLimit").removeClass("active");
    $(this).parent().find(".maxLimit").addClass("active").show("800");
    $(this).closest("#portfolio").find(".maxLimit").not(".active").hide("800")*/
});
$(document).on("blur",".percentValueInput", function (e) {
    if (isNaN($(this).val()) || $(this).val() == '') {
        $(this).val('0.00');
    }
    applyRestrictions($(this), $(this).val());
    loadProgressChart();
});
function OpenPortBuilder(selectedPortfolio) {
    //CaptureAAAnalytics('Infographic-', 'Callout-Edit Portfolio', location.pathname);
    isBaseballCardTitleClicked = true;
    containerWidth = ($('#PortfolioViewContainer').width() - 66);
    $('#portfolioBtn').trigger('click');
    $('.customPortfolios').val(selectedPortfolio).trigger('change');
}